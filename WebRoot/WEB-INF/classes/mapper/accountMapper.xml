<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace和定义的Mapper接口对应，并实现其中的方法 -->
<mapper namespace="com.wangku.mapper.AccountMapper">
	<resultMap type="com.wangku.entity.Account" id="accountResultMap">
		<id property="id" column="id" />
		<result property="name" column="name" />
	</resultMap>
	<!-- id和mapper接口中的方法名对应，resultType使用mybatis.xml中的别名 -->
	<select id="getAccount" resultMap="accountResultMap">
		<![CDATA[
			select * from test limit 1
        ]]>
	</select>

	<select id="getAllAccount" resultType="list" resultMap="accountResultMap">
		<![CDATA[
			select * from test
        ]]>
	</select>

	<!-- accountResultMap是account-resultmap.xml中定义的resultmap -->
	<select id="getAccountById" parameterType="long" resultMap="accountResultMap">
		<![CDATA[
			select * from test where id = #{id}
        ]]>
	</select>

	<!-- accountMap.accountResultMap是account-resultmap.xml中定义的resultmap，通过namespace.id找到 -->
	<select id="getAccountByNames" parameterType="string"
		resultMap="accountResultMap">
		<![CDATA[
			select * from test where name = #{name}
        ]]>
	</select>

	<!-- 自动生成id策略 -->
	<insert id="addAccount" parameterType="com.wangku.entity.Account">
		insert into test(id, name)
		values(#{id}, #{name})
	</insert>

	<!-- 根据selectKey语句生成主键 -->
<!-- 	<insert id="addAccount4Key" parameterMap="com.wangku.entity.Account"> -->
<!-- 		<selectKey keyProperty="account_id" order="BEFORE" resultType="int"> -->
<!-- 			select cast(random() * 10000 as Integer) a from #Tab -->
<!-- 		</selectKey> -->
<!-- 		insert into account(account_id, status, username, password) -->
<!-- 		values(#{accountId}, #{status}, #{username}, #{password}) -->
<!-- 	</insert> -->

	<update id="editAccount" parameterType="com.wangku.entity.Account">
		update test set
		name = #{name}
		where
		id = #{id}
	</update>

	<delete id="removeAccount" parameterType="long">
		delete from test
		where id = #{id}
	</delete>
</mapper>
